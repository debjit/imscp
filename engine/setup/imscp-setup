#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010 - 2011 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category		i-MSCP
# @copyright	2010 - 2011 by i-MSCP | http://i-mscp.net
# @author		Daniel Andreca <sci2tech@gmail.com>
# @version		SVN: $Id$
# @link			http://i-mscp.net i-MSCP Home Site
# @license		http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/..";
use lib "$FindBin::Bin/../PerlLib";
use lib "$FindBin::Bin/../PerlVendor";

use iMSCP::Debug;
use iMSCP::Boot;
use iMSCP::Dialog;

iMSCP::Debug->newDebug('imscp-setup.log');

require "$FindBin::Bin/imscp-setup-methods.pl";

################################################################################
# Starting update process
#
# @return void
#
sub setup_start_up {

	debug('Starting...');

	# Fixing umask for logfiles permissions on creation (0640)
	umask(027);

	iMSCP::Boot->new(mode => 'setup')->init({nodatabase => 'yes'});

	#enter silent mode
	silent(1);

	if(-e '/tmp/imscp-backup-all.lock') {
		iMSCP::Dialog->factory()->msgbox(
					"\n
					\\Z4[NOTICE]\\Zn

					Backup engine is currently running. Aborting...
					");
		exit 1;
	}


	debug('Ending...');

	0;
}

################################################################################
# Shutting down setup process
#
# @return int 0 on success, other on failure
#
sub setup_shut_down {

	debug('Starting...');

	iMSCP::Dialog->factory()->msgbox(
					"\n
					\\Z1Congratulations!!!\\Zn

					You installed i-MSCP '$main::imscpConfig{'Version'}' successfully!\n\n

					Please type $main::imscpConfig{'BASE_SERVER_VHOST_PREFIX'}$main::imscpConfig{'BASE_SERVER_VHOST'} in your browser and log in with your Administrator Account to use i-MSCP."
	);

	debug('Ending...');

	0;
}

sub setup_engine {

	debug('Starting...');

	use iMSCP::Stepper;
	##  Starting user dialog
	user_dialog();

	my @steps = (
		[\&load_old_imscp_cfg, 'Loading old i-MSCP configuration file: '],
		[\&update_imscp_cfg, 'Save old variable if needed: '],
		[\&setup_system_users, 'Creating default users: '],
		[\&setup_imscp_database_connection, 'i-MSCP database connection: '],
		[\&setup_imscp_database, 'i-MSCP database: '],
		#[\&setup_system_dirs, 'i-MSCP directories: '],
		#[\&setup_base_server_IP, 'i-MSCP system IP: '],
		#[\&setup_hosts, 'i-MSCP system hosts file: '],
		#[\&askVHOST, 'i-MSCP virtual hostname'],
		#[\&setup_resolver, 'i-MSCP system resolver: '],
		#[\&setup_crontab, 'i-MSCP crontab file: '],
		#[\&askPHPTimezone, 'PHP timezone: '],
		#[\&setup_default_sql_data, 'i-MSCP default SQL data: '],
		#[\&setup_ssl, 'i-MSCP certificate setup: '],
		#[\&setup_gui_pma, 'i-MSCP PMA configuration file: '],
		[\&preinstallServers, 'i-MSCP server preinstall task: '],
		[\&preinstallAddons, 'i-MSCP addons preinstall task: '],
		[\&installServers, 'i-MSCP server install task: '],
		[\&installAddons, 'i-MSCP addons install task: '],
		[\&postinstallServers, 'i-MSCP server postinstall task: '],
		[\&postinstallAddons, 'i-MSCP addons postinstall task: '],
		[\&setup_imscp_daemon_network, 'i-MSCP init scripts: '],
		[\&askBackup, 'Setting backup: '],
		#[\&rebuild_customers_cfg, 'Rebuilding all customers configuration files: '],
		[\&set_permissions, 'Permissions setup: '],
		[\&restart_services, 'Starting all services: '],
		[\&save_conf, 'Backup conf file: '],
		[\&additional_tasks, 'Additional tasks: '],
	);
	my $step = 1;
	for (@steps){
		step($_->[0], $_->[1], scalar @steps, $step);
		$step++;
	}
	iMSCP::Dialog->factory()->endGauge()  if iMSCP::Dialog->factory()->needGauge();

	debug('Ending...');
	0;
}

################################################################################
#                                Main program                                  #
################################################################################

setup_start_up() and exit 1;
setup_engine() and exit 1;
setup_shut_down() and exit 1;

exit 0;

#END{
	#my @warnings	= getMessageByType('WARNING');
	#my @errors		= getMessageByType('ERROR');
	#my @fatals		= getMessageByType('FATAL ERROR');
#
	#my $msg	 = "\nWARNINGS:\n"		. join("\n", @warnings)	. "\n" if @warnings > 0;
	#$msg	.= "\nERRORS:\n"		. join("\n", @errors)	. "\n" if @errors > 0;
	#$msg	.= "\nFATAL ERRORS:\n"	. join("\n", @fatals)	. "\n" if @fatals > 0;
#
	#my $message = getMessage();
#
	#iMSCP::Debug->newDebug('discard');
#
	#if($main::imscpConfig{LOG_DIR} && -d $main::imscpConfig{LOG_DIR}){
		#open(F, '>', "$main::imscpConfig{'LOG_DIR'}/imscp-setup.log") or fatal("Error: Can't open file '$main::imscpConfig{'LOG_DIR'}/imscp-setup.log' for writing: $!");
		#print F $message;
		#close F;
		#print STDOUT "\nA log file with details can be found at: $main::imscpConfig{'LOG_DIR'}/imscp-setup.log\n";
	#}
	#print STDERR $msg if $msg;
#}
