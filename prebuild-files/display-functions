#!/bin/sh

# i-MSCP a internet Multi Server Control Panel
#
# Copyright (C) 2010 by internet Multi Server Control Panel - http://i-mscp.net
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>
#
# The Original Code is "i-MSCP internet Multi Server Control Panel".
#
# The Initial Developer of the Original Code is i-MSCP Team.
# Portions created by Initial Developer are Copyright (C) 22010 by
# internet Multi Server Control Panel. All Rights Reserved.
#
# @category		i-MSCP
# @copyright	2010 by i-MSCP | http://i-mscp.net
# @author		Daniel Andreca <sci2tech@i-mscp.net>
# @version		SVN: $Id$
# @link			http://i-mscp.net i-MSCP Home Site
# @license		http://www.gnu.org/licenses/ GPL v2

## print text in color
##
## @author Daniel Andreca <sci2tech@gmail.com>
## @since   1.0.0
## @version 1.0.0
## @param	String 	color	Color to print
## @param	String 	text	text to print
## @return	void
colorStart(){
	local _color="${1}" _temp=
	if [ -z "${_color}" ]; then
		_color='red'
	fi
	if [ ! -z "${_color}" ]; then
		local \
			black="0;30" \
			dark_gray="1;30" \
			red="0;31" \
			light_red="1;31" \
			green="0;32" \
			light_green="1;32" \
			brown="0;33" \
			yellow="1;33" \
			blue="0;34" \
			light_blue="1;34" \
			purple="0;35" \
			light_purple="1;35" \
			cyan="0;36" \
			light_cyan="1;36" \
			light_gray="0;37" \
			white="1;37"
		eval _temp=\$${_color}
		if [ ! -z "${_temp}" ]; then
			 writelog "\033[${_temp}m"
		fi
	fi
}

colorEnd(){
	 writelog "\033[0m"
}

colortxt() {
	local  _color="${1}" _text="${2}"
	if [ -z "${_color}" ]; then
		writelog "[ERROR] colortxt: Not enought parameters!\n"
		exit 1
	fi
	if [ -z "${_text}" ]; then
		_color=''
		_text="${1}"
	fi
	colorStart "${_color}"; writelog "${_text}"; colorEnd;
}

oktxt() {
	local _text=$1
	if [ -z $_text ]; then _text='ok'; fi
	_text=$(echo "$_text" | tr [:lower:] [:upper:])
	writelog ' [ '; colortxt 'green' $_text; writelog " ]"
}

warntxt() {
	local _text="${1}"
	if [ -z $_text ]; then _text='warning'; fi
	_text=$(echo "$_text" | tr [:lower:] [:upper:])
	writelog ' [ '; colortxt 'yellow' "${_text}"; writelog " ]"
}

failtxt() {
	local _text="${1}"
	if [ -z "$_text" ]; then _text='fail'; fi
	_text=$(echo "$_text" | tr [:lower:] [:upper:])
	writelog ' [ '; colortxt 'red' "${_text}"; writelog " ]\n"
	writelog '[ '; colortxt 'red' 'EXITING...'; writelog " ]\n"
	exit
}

title() {
	writelog "\n\033[4m${1}\033[0m\n";
}

getSize() {
	test -x /usr/bin/tty && CONSOLE=`/usr/bin/tty`
	test -z "$CONSOLE" && CONSOLE=/dev/console
	SIZE=$(stty size < $CONSOLE)
	SCREEN_W=${SIZE#*\ }
	SCREEN_H=${SIZE%%\ *}
	if [ $SCREEN_W -eq 0 ];then SCREEN_W=80; fi
	if [ $SCREEN_H -eq 0 ];then SCREEN_H=40; fi
}

setDimensions() {
	getSize
	if [ "$SCREEN_W" -gt 0 ]; then MAX_W=$(($SCREEN_W-2)); fi
	if [ "$SCREEN_H" -gt 0 ]; then MAX_H=$(($SCREEN_H-2)); fi
	TEXT_W=`echo "$1" | wc -L`
	TEXT_H=`echo "$1" | wc -l`
	DIALOG_H=$(($TEXT_H+8))
	THRESH=$((2*$DIALOG_H))
	DIALOG_W=$(($TEXT_W+8))
	if [ $DIALOG_W -lt $THRESH ]; then DIALOG_W=$((2*$DIALOG_W)); fi
	if [ "$DIALOG_W" -lt 20 ]; then DIALOG_W=20; fi
	if [ "$DIALOG_H" -lt 10 ]; then DIALOG_H=10; fi
	if [ "$DIALOG_W" -gt "$MAX_W" ]; then DIALOG_W=$MAX_W; fi
	if [ "$DIALOG_H" -gt "$MAX_H" ]; then DIALOG_H=$(($MAX_H-1)); fi
}

msgbox() {
	setDimensions "$1"
	if [ "${2}" ]; then params="--title '${2}'"; fi
	eval "$DIALOG --colors ${params} --msgbox '${1}' ${DIALOG_H} ${DIALOG_W}"
}

msgopts() {
	local _params='' _title="${1}" _options="${2}" _default="${3}" _size=''
	if ( [ -z "${1}" ] || [ -z "${2}" ] || [ -z "${3}" ] ); then colortxt "makeopts need 3 parameter! none provided!!! "; failtxt; exit 1; fi
	for OPTION in ${_options}; do
		if [ "${OPTION}" = "${_default}" ]; then
			_params="$_params ${OPTION} '' ON"
		else
			_params="$_params ${OPTION} '' OFF"
		fi
	done
	_size=$(echo "${_options}" | wc -w)
	setDimensions "$1"
	eval "$DIALOG --radiolist '${_title}' $(($_size+$DIALOG_H)) ${DIALOG_W}  ${_size} ${_params}"
}

msgask() {
	setDimensions "${1}"
	if [ "${2}" ]; then params="--title '${2}'"; fi
	eval "${DIALOG} ${params} --yesno '${1}' ${DIALOG_H} ${DIALOG_W}"
}

